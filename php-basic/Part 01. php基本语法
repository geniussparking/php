<?php 
echo '<b>第二章：php基本语法</b>'
?>
<br />
<?php 
/*
一、PHP基本语法
指令分隔符  分号
1）PHP语句分为两种，一种是在程序中使用结构定义语句，另外一种是在程序中使用功能执行语句，其中前者结尾不需要使用分号，后者必须使用分号结尾；
2）结束标记?>就隐含一个分号，所以PHP代码最后一行可以不加分号；

  二、变量
	概述：
		举例子：
			现实生活中我们在家里会用柜子来存放我们的衣服，包，书籍等等其他的东西！
			那么我们在编程语言里面是没有 衣服，包，书籍这些概念的！
			我们只有数据！那么我们在程序中这些数据是存放在哪里的呢？  这个就是存放在我们的变量里面的！
			程序中的数据存放在变量里面，变量是用于临时（只有在程序运行过程中才存在）存储值（数据）的容器；变量在任何编程语言中都是核心地位；
			变量是用于临时（只有在我们的程序的运行过程中才存在）存储值（数据）的容器
	1.变量的声明
		声明:说白了就是实现告知，通知！
		在我们一些编程语言里面比如C语言 使用变量之前要事先通知，事先声明一下！
		注意：在我们的PHP程序里面 使用变量之前是不需要声明的！ 当第一次给一个变量赋值时，才创建了这个变量，变量用于存储值，比如数字，文本，字符串或者数组，我们可以在脚本中重复使用它；
		
		变量用于存储 数字、文本字符串 或者数组这些数据!
		$变量名=数据(值)
		= 在数学里面是‘等于’的意思,在我们的程序语言里面，它不是等于号，它是  '赋值操作符'
	2.变量的销毁
		unset($变量名称)
		$and1=1;
		unset($and1);//销毁$and变量
		echo $and1;//提示出错，因为变量已经被销毁了！
	3.变量的命名规则
		1)变量名称严格区分大写
			$name,$NAME,$Name都是不同的变量
		2)
			字母或者下划线开头
			后面接任意数量的字母数字下划线都可以!
			
			错误的命名方式：
				$1name  错误点：以数字开头了
				$n ame  错误点：中间有空白字符
			总结一下：变量名只能包含 字母 数字 下划线 并且必须以字母或者下划线开头！
			
		3)最好不要用一些关键字作为变量名称(因为在其他的编程语言里面是完全不被允许的)! 例如：$and，虽然语法不会报错，但是容易混淆；
	4.可变变量
		//可变变量
		$abc='test';//定义了一个变量$abc里面存了值test
		$$abc='孙胜利';//$test='孙胜利';
		echo $test;
		
		了解一下即可！
	5.变量的引用赋值
		$a=1000;
		$b=$a;//相当于把$a的值，复制一份再赋值给$b这个变量
		$b=&$a;//相当于给$a起了一个别名，操作其中任何一个，都会影响到另外一个变量的值!
		$b=20;
		echo $a;
		暂时了解一下就可以了!
三、变量类型
	概述：变量类型是指保存在该变量中的数据类型，在计算机编程语言世界中，每个数据都有它的类型；具有相同类型的数据才能被彼此相互操作；
		变量比喻成柜子  衣服，书籍
		PHP对变量类型看的比较淡，变量或常量的数据类型由程序上下文决定，不需要事先声明类型；
		一个柜子要是往里面存书籍，那么它就是书柜，往里面存衣服，那就是衣柜，不需要事先声明是什么柜子，一切根据实际需要使用即可！	
		1.变量类型简介
		  1）bool (布尔型)
		     $a=true;
			 var_dump($a);   输出变量类型；
			 往变量里面存true或者false，那么这个变量就是布尔型了
		  2）int (整型)
			 往变量里面存整数，那么这个变量就是整型变量啦！
			 $a=1;
			 $a=true; 这里可以先存整型变量，然后根据需要可以再存布尔型，这就是PHP对变量看的淡，根据实际需要来存放不同类型的变量；
		  3）float (浮点型，也称double)
			 往变量里面存小数，那么这个变量就是浮点型数据了!
			 $a=1.1;
			 var_dump($a);
		  4）string (字符串)
			 字符串就是一系列的字符组成串在一起！
			 1单引号：
				$b=1;
				$a='test$bdwqd\'wqdqw';   单引号中不能包含单引号，非要使用单引号的话，这个单引号前面使用反斜杠；
				var_dump($a);
				echo $a;
				单引号字符串中出现的变量不会被变量的值替代,即PHP不会解析单引号中的变量,因此在定义简单字符串的时候，使用单引号会效率更高，因此没有特别的要求，应使用单引号定义字符串！

			 2双引号
				$b=100;
				$a='te$bst......';
				$a="te{$b}st......";
				var_dump($a);
				echo $a; 双引号中的变量名会被变量值所代替，即PHP会解析双引号之间的变量；双引号中间也不能使用双引号，需要用反斜杠转义；
			 3定界符  只能包括字母数字下划线，下划线和字母开头；定界符里面可以放变量，需要用一对花括号包起来；定界符里面利用包含单双引号，不会出错；
				$b=200;
				$a=<<<www
				dwqdqwdwq{$b}dwqdqdqdqdwqdwqcwcfwefwefcscwecwefwdqwdqdefwefwefewfwe    
				www;
				var_dump($a);
		  5）array (数组)
				以后再讲！
		  6）object (对象)
				以后再讲！
		  7）resource (资源)
		  8）NULL
			 null表示一个变量没有值，表示空
			 将变量直接赋值为null  $a=null;
			 声明的变量尚未被赋值
			 被unset函数销毁的变量
			 $a=1111;
			 unset($a);
			 var_dump($a);
			 
		2.变量类型相互转换
			有布尔值参与运算时，true将转化为整形1，false将转化为整形0
			     有null值参与运算时，null值转化为整形0再进行运算
			     有int型和float数据参与运算时，先把int转变为float类型后再进行运算
			     有字符串和数字型(int或者float)参与运算时的情况

			 这些都是程序运行中不太可控的部分所以在编写代码时最好不要涉及!
			强制转换:
			     在要转换的变量之前加上括号括起来目标类型
			     (int)
			     (bool)
			     (float)
			     (string)
			     (array)
			     (object)
			     转变并不会改变被转换变量本身的类型
				$a='孙胜利';
				$b=(int)$a;
				var_dump($a);   输出0；
				var_dump($b);
	<br />
$name='Jack';
echo $name;
unset($name);//变量销毁
echo'<br />';

$name='test';
$$name='ceshi';//相当于$test---可变变量
echo $test;


$a=1000;
$b=$a; //相当于把$a的值再复制一份赋给$b这个变量
echo $a;
echo'<br />';
echo $b; 



$a=1000;
$b=&$a;//相当于给变量$a起了一个别名，改变这时候两个变量相当于一个变量，改变任何一个的值，另一个也跟着改变;
$b=100;
echo $a;


$a=1;
$a1=false;
$a2=1.2;
echo $a;//返回1
var_dump($a);//返回整型数据
var_dump($a1);//返回变量类型:bool值
var_dump($a2);//返回浮点型
$a=true;
var_dump($a);//这里变量$a又输出的是bool型，说明可以随时改变变量的类型，这就是php的弱类型语言



$b='string.........   ... ..  .. . . . .. . . ';
var_dump($b); //输出的是字符串；
$b1='string....\'';//如果需要输出单引号，需要在单引号前面使用 \ 转义一下
echo $b1; //输出string....'，单引号被转义了，可以正常输出.

//单引号，如果需要输出单引号，需要在单引号前面使用 \ 转义一下
$c='string......';
$d=10000;
$c='string$d....';
echo $c; //注意这时候，变量$c里面的$d不会被转换成10000，因为用的是单引号，因此，在定义简单字符串的时候，尽量用单引号，这样程序运行效率比较高；

//双引号
echo '<br />';
$e="string again";
$f=10000;
$e="string{$f}again";
echo $e;//这里的$f被转换成了10000; 就是说双引号里面的变量会被转换成它的内容。需要写成{$f}才行,或者$f前后都空格;


//定界符，<<<后面可以起任意名字，如aaa,bbb,abc,a,b,d,结束的时候按照下面格式，前后一致，分号结束
$b=200;
$a=<<<v
dwqdqwdwq{$b}dwqdqdqdqdwqdwqc   '' ' ' ' 'dd / / //// \\\\\\定界符里面    可以加  特殊字  符'""＂""＂＂＂"＂"＂"＂"＂"wcfwefwefcscwecwefwdqwdqdefwefwefewfwe
v;
var_dump($a);


//空值null
$a;
var_dump($a);


//强制转换
$a='Jack是只猫吗？';
var_dump($a);
$b=(int)($a);
var_dump($b);//这里$a被转换成了整型 int=0赋给了$b;
var_dump($a);//$a没有变化
*/


//常量
/*
 
 四、常量
	1.概念
		常量是用于临时（只有在我们的程序的运行过程中才存在）存储值（数据）的容器
	2.定义和使用
		define('常量名称',常量值) 或者 define("常量名称",常量值)
		常量的命名：
			1)和变量一样 只能包含字母数字下划线 并且必须以 字母或者下划线开头
			2)按照惯例常量名字总是大写的
			3)自定义的常量是严格区分大小写的！
		defined()函数来检查是否定义了某个常量
	3.常量和变量的区别
		1)常量前面没有美元符号($)
		2)常量只能用define()函数定义，不能通过赋值语句
		3)********常量可以不用理会变量范围的规则而在任何地方定义和使用,这一条是与变量最大的区别。
		4)常量一旦被定义就不能被重新定义或者取消定义，变量是可以通过unset()销毁的；
		5)常量的值只能是bool,int,float,string类型
	4.预定义常量
		预定义常量说白了就是我们的PHP内核已经帮我们定义好了的常量!  打印出所有的预定义常量：print_r(get_defined_constants());
		
		其中有的预定义常量是两个下划线开头的，这些预定义常量我们又叫它魔术常量
		
			代码所在的位置不同他的值也是不同的，所以它叫 魔术常量
		八个常用的魔术常量
			http://php.net/manual/zh/language.constants.predefined.php
		预定义常量是不区分大小写的！自定义常量严格区分大小写；
		
*/
/*
define('myname','jack是只猫');
echo myname;
echo '<br />';
define('MY_NAME','Jack猫'); //常量常规定义方法
echo MY_NAME;
var_dump(MY_NAME);


//预定义常量  http://php.net/manual/zh/language.constants.predefined.php 官网说明，魔术常量
//print_r(get_defined_constants());//预定义常量列表，只需要知道几个常用的预定义常量就好了..
echO __FILE__; //输出当前文件位置;
echo __LINE__;//输出当前代码的行数;
echo __FUNCTION__;
echo __DIR__;
echo __CLASS__;

*/


/*
 五、运算符
	概述：
		说白了就是一些符号，这些符号可以将变量或者数据执行某种运算！运算符左右两边都可以加空格增加美观 $a&&$b  $a && $b
	1.算术运算符
		1)+
			$a=1;
			$b=2;
			$c=$a+$b;
			echo $c;
		2)-
			第一个意思： 减号
				$a=10;
				$b=2;
				$c=$a-$b;
				echo $c;
			第二个意思： 取反
				$a=1;
				$b=-$a;
				echo $b;//-1
				echo '<br />';
				echo $a;//1
				注意：取反并不会影响到被取反变量本身的值!
		3)* 乘号
			$a=4;
			$b=2;
			$c=$a*$b;
			echo $c;
		4)/ 除号
			$a=10;
			$b=2;
			$c=$a/$b;
			echo $c;
		5)% 取模(余数)
			$a=12;
			$b=2;
			echo $a%$b;//0
		6)++ 自增
			前++
				当在一个语句里面需要使用到被自增的变量的值的时候，前++会先执行自增,然后再返回自增之后的值！
				$a=10;
				echo ++$a;//11   这里echo ++$a;相当于两句话：$a=$a+1; echo $a;
			后++
				当在一个语句里面需要使用到被自增的变量的值的时候，后++会先返回变量的值然后再去执行自增
				$a=10;
				//++$a;//$a=$a+1;
				//$a++;//$a=$a+1;
				echo $a++;//这里相当于两句话：echo $a; $a=$a+1;
				echo '<br />';
				echo $a;//11
				
			注意：
			$a=10;
			++$a;//这种情况不需要用到自增变量值的时候，和后++无区别
			echo $a;
		7)-- 自减
			前--
				$a=10;
				//$a--;//$a=$a-1; 和--$a没区别;
				echo --$a;//$a=$a-1;echo $a;
				echo '<br />';
				echo $a;
			
			后--
				$a=10;
				//$a--;//$a=$a-1; 和--$a没区别;
				echo $a--;//echo $a;$a=$a-1;
				echo '<br />';
				echo $a;
		注意：自增或者自减是对变量而言的！
		2.字符串运算符
		. 连接运算符
		$a='孙胜利';
		$b='测试字符串连接符';
		echo $a.$b;
	3.赋值运算符
		=
			把右边的值赋给左边的变量
			$a=1;
			二元运算符
			
			表达式是 PHP 最重要的基石。在 PHP 中，几乎所写的任何东西都是一个表达式。简单但却最精确的定义一个表达式的方式就是“任何有值的东西”。
		+=
			$a=1;
			$b=2;
			$a+=$b;//$a=$a+$b;
			echo $a;
		-=
			$a=2;
			$b=1;
			$a-=$b;//$a=$a-$b
			echo $a;
		4.比较运算符
		概念：
		对操作数（按照比较运算符的要求,规则）进行比较
			如果比较出的结果满足比较运算符的要求那么结果就是true(真，成立，满足),否则就是false（假，不成立,不满足）
		PHP中规定：
			使用echo输出布尔类型值的时候
				echo true;它在页面中会输出1
				echo false;它会在页面中什么都不输出
				规定的，记住就好！所以说我们在测试的过程中如果需要输出布尔类型值的时候我们最好使用var_dump()来输出更明了的结果！
				
		1)== 值是否相等
			如果值相等则就是 true（真，成立）
			如果值不相等那么就是false（假，不成立）
			$a=1;
			$b=1;
			var_dump($a==$b);//true
		2)=== 全等（值要相等，类型也要相等）
			如果两边操作数的值 全等那么就是true否则就是false
			$a=11;
			$b='11';
			//var_dump($a==$b);//true
			var_dump($a===$b);//false
		3)!= 值是否不相等
			如果两边操作数的值不相等那么就是true，否则就是false
			$a=1;
			$b=11;
			var_dump($a!=$b);//true
		4)<> 同上
		5)!== 不全等
			如果两边的操作数不全等那么就是true，否则就是false
			/*
			$a=1111;
			$b=2;
			var_dump($a!=$b);//true
			var_dump($a!==$b);//true
			
			$a=11;
			$b='11';
			var_dump($a!=$b);//false
			var_dump($a!==$b);//true,$a不全等于$b
		6)< 小于
			比较两边操作数的值，前面的是否小与后面的
			$a=1;
			$b=1;
			var_dump($a<$b);//false,$a小与$b这句话正确还是错误
		7)> 大于
			$a=10;
			$b=1;
			var_dump($a>$b);
		8)<= 小于等于
			$a=1;
			$b=1;
			var_dump($a<=$b);//$a小与等于$b就是true,否则就是false
		9)>= 大于等于
			$a=2;
			$b=1;
			var_dump($a>=$b);//true
				
	5.逻辑运算符（参与运算的值是bool型（不是bool型的将会被转换成bool），得到的也是bool型值）
		概念：
			对表达式进行逻辑运算，运算出的结果是布尔类型的值（true,false）
			要求：
				参与逻辑运算的表达式的值是布尔类型的值，如果不是布尔类型的值会被PHP自动转换成布尔类型的值，然后再参与运算！
		1)逻辑与
			and 或者 &&
				运算规则：
					左右两边的表达式的值都为true的时候，运算的结果就是true
					否则只要其中任意一个为false，运算的结果就是false;
				现实举例：
					true 及格
					false 不及格
					左右两边的表达式就是我们要考试的科目;
					要求：当语文和数学都及格的时候那么，最终的结果才能够通过(true),否则就是不通过(false)
			$a=false;//语文
			$b=true;//数学
			var_dump($a && $b);  输出false
			$a=1;
			var_dump((bool)$a);  输出true，强制转换成bool类型
			bool (布尔型)
			     这个是最简单的类型,布尔型表达了true或false,即真或假。
			     以下值被认为是false，其他的值都是被认为是true
			     ①布尔值false
			     ②0   数值
			     ③浮点型0.0
			     ④空白字符串和字符串0     注意这里字符串'0'是false
			     ⑤没有成员的数组
			     ⑥NULL			
			中间隐含一个问题：“短路”,运算符的优先级的问题！
		2)逻辑或
			or 或者 ||
				运算规则：
					左右两边的表达式的值有一个为true，运算的结果就是true
					，只有当两边的值都是false的时候，结果才会是false
			$a=false;//语文
			$b=true;//数学
			var_dump($a || $b);
			
			现实举例：
				要求：当语文和数学有一门及格那么最终的结果就是通过true
			中间隐含一个问题：“短路”,运算符的优先级的问题！
		3)逻辑异或
			xor
				运算规则：
					左右两边的表达式的值不一样的时候结果就是true,如果一样那么运算的结果就是false
				
				$a=false;
				$b=false;
				var_dump($a xor $b);
		4)逻辑非
			!
				运算规则：	
					将原来表达式的值否定掉，原来是true，那么结果就是false
						原来是false，那么结果就是true
			
					
		
		


$a='Jack';
$b='测试字符串连接符';
echo $a.$b;
//几元运算符是针对有几个操作数来说的，比如取反-就是一元运算符，$a-$b涉及到两个操作数，这就是二元运算符。


$a=1;
$b=15;
$c=$a==$b;
echo $c;
var_dump($c);//输出布尔值的时候，用var_dump();会更清晰，因为php输出false的时候什么都不输出，true输出的是1;


$a=11;
$b='11';
//var_dump($a=$b);//string '11'  注意：要一个个输出，不然前面的会影响后面的值，因为有=赋值操作
//var_dump($a==$b);//boolean true 这个是判断两个变量的值是不是相等，$b的值会被自动强制转换成整型，相当于(int)$b,测试：var_dump((int)$b);
//var_dump($a===$b);//boolean false  这个是判断两个变量是不是完全相等，值，类型


$a=false;
$b=false;
var_dump($a && $b);//--->false  逻辑与运算,一个false即false
 */

/*
$a=10;
$b=true;
var_dump($a && $b);//得到的是true,因为$a=10被转换成bool ture. 
*/

/*
 需要特别注意：
 以下值被认为是false，其他的值都是被认为是true
			 ①布尔值false
			 ②0
			 ③浮点型0.0
			 ④空白字符串和字符串0//空白字符串指的是直接一对单引号或者双引号里面没有任何内容,空格也是内容，会被转换成true
			 ⑤没有成员的数组
			 ⑥NULL
要测试一个值会被转换成true或false,只需要var_dump((bool)$a);
$a=;
var_dump((bool)$a);//看结果是什么


$a=0;
$b=0;
var_dump($a || $b);//逻辑或，一个是true则true

$a=true;
$b=true;
var_dump($a xor $b);//逻辑异或，两边要不一样，返回true;两边一样，返回false


$a=0;
var_dump(!$a);//逻辑非

*/

/*

6.位运算符
直接跳过！
7.其他运算符
1)? :
三元运算
格式：
表达式1 ? 表达式2 : 表达式3;
如果表达式1的值为true,那么就执行表达式2,否则那么就执行表达式3
$a=false ? 10 : 20;
echo $a;//20
2)``
可以把系统的命令放在里面执行！
涉及到跨平台:
$a=`ipconfig`;
$b=`ifconfig`;
var_dump($b);
3)@
屏蔽表达式可能发生错误！
echo @$a;   这里的@不能放在echo前面，这里$a才是表达式；@的作用是屏蔽表达式可能发生的错误；
当然，实际在哪些地方应用，我们用到大家就知道了！
4)=>  数组
5)->  面向对象的时候使用
6)instanceof
8.运算符的优先级
优先级的概念：
谁的优先级别高就先算谁！
结合方向：
规定了从那个方向开始算的问题！
	
优先级这个概念只要知道一些基本的常用的就可以了，因为我们在实际开发中几乎没有那么需要写非常复杂的表达式，
让我们去考虑先算谁，后算谁的问题！

优先级归纳:
1)[无]递增递减
2)[右]逻辑非!
3)[左]乘，除，取余
4)[左]加，减，字符串连接符
5)[无]包含大于号或者小于号的比较运算符
6)[无]不包含大于号或者小于号的比较运算符
7)[左]逻辑与&&
8)[左]逻辑或||
9)[左]? :
10)[右]赋值运算符
12)[左 ]逻辑异或xor
圆括号的作用：
用圆括号可以将表达式里面的某一块看成一个整体！
*使用括号可以增强代码的可读性。
哪怕有的地方不需要加括号你也可以加上以增加可读性！
	

//三元运算符
//格式：
//表达式1 ? 表达式2 : 表达式3;
//如果表达式1的值为true,那么就执行表达式2,否则那么就执行表达式3
$a=true ? 10 : 20;//给$a赋值10
$a=false ? 10 : 20;//给$a赋值20
//$a=`ipconfig`;//双反引号之间可以执行cmd命令；  这个功能很实用；
echo $a;

//屏蔽可能错误
$a=1;
echo @$a;//不确定某个表达式正不正确的时候，在前面加个@，这里@不能放到echo前面；

	
//“短路”问题
$a=true;
$b=1;
$f=$a && ++$b;
var_dump($f);
echo $b;//因为$a是true,这时候++$b会进行运算，输出2;

echo '<br />';
/*
$c=true;
$d=-1;
$e=$c && ++$d;
var_dump($e);
echo $d;//因为$c是true,这时候++$d会进行运算，输出0;

$c=false;
$d=1;
$e=$c && ++$d;
var_dump($e);
echo $d;//因为$c是false,这时候因为是逻辑与操作，$e会直接得到false(这是程序设计者的思路，可能是为了节约资源，因为已经没有必要计算后面的，而逻辑或||就不同，)，后面的++$d不会计算，所以$d还是1，没有变化。

$c=false;
$d=1;
$e=$c || ++$d;//逻辑或，虽然$c是false,但是计算没有结束，这里会计算++$d
var_dump($e);
echo $d;//输出2

$c=true;
$d=1;
$e=$c || ++$d;//逻辑或，$c是true,计算结束，这里不会计算++$d
var_dump($e);
echo $d;//返回1
这就是“短路”原理。
*/

?>

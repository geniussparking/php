<?php
/*

流程控制：
对PHP程序执行的过程进行控制！
PHP有哪些手段对程序执行过程进行控制！
分支执行：if switch
循环执行：while do while for
一、顺序执行
自上而下的执行即可！  对这个执行过程没有控制!
二、分支执行
分支执行可以根据条件是否满足来选择执行某些代码，PHP的分支执行主要通过两种语句（if，switch）来实现！
1.if语句
注意：我们if语句的表达式所控制的代码，最好用花括号括起来，哪怕就是一条语句也用花括号括起来！
if语句可以嵌套，这是根据实际需求来的！
1)单向条件
if(表达式) 语句1;
表达式的值为true 那么就执行语句1,否则就不执行！
$pass=60;
$a=40;
if($a>=$pass){
echo '恭喜，考试通过';
echo 'dwqdwqdq';
//.......各种其他语句！
}
echo '代码执行结束！';
2)双向条件
$pass=60;
$a=40;
if($a>=$pass){
echo '恭喜你！考试通过啦！';
//.......
}else{
echo '很遗憾，您的科目没有通过！';
//.......
}
3)多向条件
$a=84;
$grade1=60;//低于60不及格
$grade2=75;//及格
$grade3=85;//良好
if($a<$grade1){
echo '不及格';
}elseif($a<$grade2){
echo '童鞋你及格了';
}elseif($a<$grade3){
echo '良好！';
}else{                       最后这里的else和后面的内容可以不写了，根据实际情况来。
echo '优秀';
}


$pass=60;
$a=80;
/*
if($a>=$pass) echo '恭喜你，考试通过！';//if后面第一个语句换行也行，就是说，只要if里面是true，紧接着if后面的第一个语句会被执行。
else echo '等待补考！';
*/
//if语句块的基本格式，花括号后面不需要加分号;
/*

if($a>=$pass) echo '恭喜你，考试通过！';//单向

if($a>=$pass){
echo '考试通过！';
echo '请学习下门课程！';
}else {
echo '请等待来年补考!';
echo '加油！';
}//双向


$a=70;
$pass=60;
$good=70;
$nice=85;
if($a<=$pass){
	echo '补考欢迎您！不要伤心哦！！';
}elseif($a<=$good){
	echo '哎哟，不错哦！';	
}elseif($a<=$nice){
	echo '人类需要你，你很优秀！';
}else{
	echo '哟```你已经打败85%的同类！';
}
2.switch语句
switch(表达式){
case 值 1://case相当于==，意思是 表达式==值 吗？
语句块1;
break;
case 值 2:
语句块2;
break;
.......
default:
语句块n
}

注意点：
1)表达式的值最好是整型或者字符串！if语句是bool型，switch语句不会转换成bool型；
2)不要忘记break语句！来跳出switch语句！每个case语句后面都加上break
3)如果某个case语句后面并没有接语句块，那脚本会向下执行；
4)case后面的语句块是不需要{}括起来的
	*/

//switch语句
/*
$a=100;
$pass=60;
$good=70;
$nice=85;
switch ($a){//注意语句格式，冒号，break，case后面不需要花括号
	case $a<=$pass:
		echo '孩子，等待来年大补考吧！';
		break;
	case $a<=$good:
		echo '哎哟，勉强及格了！';
		break;
	case $a<=$nice:
		echo '恭喜，非常不错';
	default:
		echo '打败全宇宙的节奏！<br />';
}
echo '<b>switch部分执行完毕！注意和if语句格式进行比较</b><br />';
if($a<=$pass){
	echo 'if孩子，等待来年大补考吧！';
}elseif($a<=$good){
	echo 'if哎哟，勉强及格了！';
}elseif($a<=$nice){
	echo 'if恭喜，非常不错';
}else{
	echo 'if打败全宇宙的节奏！';
}
$a=2;
switch ($a){//switch语句最好是用来判断整型或字符串类型数据，以更加精确，用if语句判断bool型的
	case 1:
		echo '周一';
		break;
	case 2:
		echo '周二';
		break;
	case 3:
		echo '周三';
		break;
	case 4:
		echo '周四';
		break;
	case 5:
		echo '周五';
		break;
	case 6:
		echo '周六';
		break;
	case 7:
		echo '周天';
		break;
	default:
		echo '数字不匹配<br />';
}

三、循环执行
计算机最擅长的功能之一就是按照规定的条件，重复执行某些操作，这是程序设计中最能发挥计算机特长的程序结构。
1.while语句
while(表达式){
各种语句....
}
当表达式（bool类型，不是bool会被转化成bool）的值为true,那么就执行下面的语句块；
当语句块执行结束之后，继续返回上面来判断表达式的值是true还是false，如果还是true，那么就继续执行语句块
直到这个表达式的值为false，那么这个while语句就执行结束了！

$i=0;
while($i<10){
echo $i++.'<br />';
}
echo '执行结束了！';
2.do...while语句
		do{
各种语句
}while(表达式);

与while语句区别就是，do while语句至少会执行一次！
3.for语句
for(表达式a;表达式b;表达式c){
各种语句
}
表达式a:会放一些初始化话的语句,$i=0,放多个表达式,中间用,隔开
表达式b：会放一些用来判断true或者false的表达式！，也可以放多个表达式，中间用,隔开
表达c：会放一些对初始化的变量进行自增的语句！放多个表达式,中间用,隔开

表达式a
表达式b 如果是true
语句块
表达式c
表达式b

$i=0;
while($i<=10){
	echo $i;
	$i++;
	echo '<br />';//简写：echo $i++.'<br />';  .是连接符
}

$a=20;
while($a<=30){
	echo $a++.'<br />';
}
echo 'game over';
//看看两个语句的区别，功能是一样的。

//do while语句
$i=0;
do{
	echo $i++.'<br />';
}while($i<=10);
	echo 'while语句执行完毕！';//do while语句至少会执行一次，和while语句的不同点，是先执行的
*/

//for循环语句
/*
 for($i=0;$i<=10;$i++){
	echo $i.'<br />';
}

for($i=0,$j=0;$i<=10;$i++,$j++){ //这里多个表达式用,分开
	echo "{$j}执行到了第{$i}遍.<br />";
}


四、特殊的流程控制语句
1.break语句
作用：用于switch语句，for，while，do...while，foreach，用于中断这些语句！
后面可以接上一个数字来表示跳出几层循环！默认不加就是跳出当前循环语句！
2.continue语句
作用：只能用在循环语句，跳出本次循环，并不是结束整个循环语句！
3.exit()语句
作用：结束当前整个程序的执行！
die()
	
	

for($i=0;$i<=10;$i++){
	echo "<p style='color:red'>\$i执行到了第{$i}遍。</p>";//用反斜杠转义，这样能输出变量名
	for($j=0;$j<=10;$j++){
		if($j==5){
			break 2; //break后面加数字几，就是跳出第几层;默认是1，1表示跳出当前循环，这个数字是指跳出几层循环的意思；
		}
		echo"---\$j执行到了第{$j}遍。<br />";
	}
}

for($i=0;$i<=10;$i++){
	if($i==5){
		continue;//$==5的时候，跳出本次循环，继续下一次
	}
	echo "\$i执行到了第{$i}遍。<br />";
}
*/

for($j=0;$j<=10;$j++){
	echo "----\$j执行到了第{$j}遍。<br />";
}
for($i=0;$i<=10;$i++){
	if($i==5){
		//exit('非法操作，程序即将结束运行！');//$==5的时候，结束程序(整个php脚本)运行
		die();//exit的别名
	}
	echo "\$i执行到了第{$i}遍。<br />";
}
?>

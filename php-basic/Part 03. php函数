<?php
/*
 * 一、自定义函数
	function 函数名([形式参数1,形式参数2,....形式参数n]){
		//各种PHP代码....
		//......
		return 表达式;//也可以不返回，如果不写那么默认返回null
	}
	函数名：只能字母数字下划线组成，只能以下划线和字母开头；
	函数的调用:
		不管是自己定义的函数还是系统提供的函数，如果函数不被调用就不会执行!
		函数的调用需要遵循定义函数的时候写的规则，一一对应，将具体的实际参数传给定义函数时候写的形式参数！
		调用函数之后执行的过程是相对独立的，互不干扰，默认没有联系！
		执行完毕返回调用的位置继续向下执行
	函数的参数：
	   形式参数由零个、一个或者多个变量组成。形式参数是写在定义的函数里面的；形式参数意思是代号，走个形式；
	   实际参数由零个、一个或者多个参数组成，每个参数是一个表达式，用逗号分隔。是调用函数的时候写的；
	   function add($a,$b){   //形式参数，就是一个形式，因为他们里面并没有具体的值！
			echo $a+$b;
			}
		add(2,3);  //实际参数，一定要和形式参数一一对应；注：不能少，但是可以多，例如add(2,3,4),只会运算前面两个2+3；
		add(4,5); //可以继续调用，和上面的没有关系；
		
	函数的返回值：
		返回给调用者,没有return,默认返回null,就是调用函数的表达式的值是null
		返回后，不会继续执行return下面的语句
		function add($a,$b){   
			return $a+$b;  //这里相当于将执行的结果值返回给调用者，结束函数运行；如果return下面还有语句的话是不会执行的；
		}
		$i=add(2,3);  //调用函数，这个函数仅仅有个return，将计算的结果返回给调用者，那么这个add(2,3)应该是有值的（有值就是表达式），可以将这个add()赋值给一个变量；
		echo $i; //这里的变量$i就是5；
		
	函数比喻成我们现实生活中的 某个零件的制造部门！
	参数：原材料或者是这个零件的一些具体的参数！

function add($a,$b){
	echo $a+$b.'<br />';
	
}
add(1,2);
add(5,5);
$i=11;
add($i,2);//也可以传入变量


function add($a,$b){
	return $a+$b.'<br />';//这里加了'<br />'之后，整个值被强制转换成了string类型，如果只返回$a+$b,则是int类型
}
//add(1,2);//如果是返回，这里不会输出任何值；
var_dump(add(1,2));//return是返回值给调用函数的地方，这里返回的值在add(1,2)里面，通过var_dump()能看出返回值的类型和值


function add($a,$b){
	return $a+$b.'<br />';
	echo '上一句return后，这句话不会被执行。';
	
}
add(1,2);//结果显示，这里没有任何输出值，echo语句也没有被执行，因为已经return掉了;
var_dump(add(1,2));//如果上面有return，则返回 string '3<br />'；如果没有return，则返回默认null 

function add($a,$b){
	echo $a+$b.'<br />';
	return $a+$b;
	echo 'return后，这句话不会被执行。';

}
$i=add(1,2);//将返回值保存到变量$i,没有return的情况下，返回null
echo '<br />'.'看看返回值是多少'.':'.$i; //输出$i，相当于输出了返回值

二、PHP变量的范围
	1.局部变量
	局部变量也称为内部变量。局部变量是在函数内定义的，其作用域仅限于函数
	   内部，离开该函数后再使用这种变量就是非法错误的！
		function test(){
			$a=1;//局部变量$a，仅仅在这个函数内部有效
		}
		echo $a;
	2.全局变量
	全局变量也称为外部变量，在函数的外部定义的，它的作用域为从变量定义处
	   开始，到本程序文件的末尾。
	   在PHP函数中无法直接使用全局变量，如需使用必须使用global声明变量！
		$i=10;//全局变量（外部变量）
		define('MY_NAME','孙胜利');     //常量可以不用理会变量范围的规则而在任何地方定义和使用；
		function test(){
			echo MY_NAME;  //常量不用global声明
			global $i;//声明$i为全局变量,然后再这个函数内部就可以使用$i，否则会报错，提示$i没有定义；
			echo $i;
			$a=1;
		}
		test();
		echo MY_NAME;  //常量可以在本文件的任何地方使用；
	3.静态变量
		静态变量的是指在函数内部定义变量的时候使用static关键字来定义变量
	   特点：函数执行完毕之后变量不会立即消失，当再次调用函数时，静态变量保
	         存的值依然存在,并且仅在第一次执行函数的时候会初始化值！
		 静态变量保存在一个专门保存静态变量的内存区域；要等整个脚本执行完毕后才会释放掉；

		function test(){
			static $a=10;//静态变量$a,初始化静态变量,尽在第一次调用的时候执行
			echo ++$a;//当第二次执行这个函数的时候$a这个变量依然存在并且里面的也值依然存在！
		}
		test();            //输出11
		echo '<br />';
		test();            //输出12
		echo '<br />';
		test();            //输出13
		echo '<br />';
		test();            //输出14
		echo '<br />';
		test();
		echo '<br />';
		test();
		echo '<br />';
		test();


//局部变量，仅仅在函数内部有效
function test(){
	$a=1;
	echo $a;
}
echo $a;//$a是局部变量，这里会报错
test();//这里执行函数，局部变量$a可以被输出，没有错误


$i=100;//定义全局变量，可以用到本php文件结尾
function test(){
	$a=1;
	echo $a;
	echo $i;
}
//echo $i;//这里直接输出全局变量$i完全没有问题
test();//$a输出没有问题，但是$i不能输出，因为没有进行声明，正确写法如下：


$i=100;//定义全局变量
define('MY_STATE', '你好，我是定义的常量，可以全局使用，函数内部使用无需声明');//定义常量的常规写法是大写加下划线，也可以小写，但是不能加$
function test(){
	$a=1;
	global $i;//全局变量需要进行全局声明
	echo MY_STATE;//这里就不用全局声明
}
test();

function test(){
	static $a=10; //定义静态变量，开辟专门的内存存放该变量，这里初始化变量值，本函数执行完毕，变量不会消失，在程序内再次调用会使用上一次运行的结果，直到程序运行结束
	echo ++$a.'<br />';
}
test();
test();
test();//当第二次执行这个函数的时候$a这个变量依然存在并且里面的值依然存在！这里输出11，12，13，这就是静态变量的特性

function test00(){
	$b=10; //变量，函数运行一次，此变量消失，再次调用的时候会再开辟内存存放，使用完，此变量再次消失
	echo ++$b.'<br />';
}
test00();
test00();
test00();//这里输出11，11，11

三、参数的传递
	1.按值传递参数
		默认的，我们在传递参数的时候默认使用的就是这个方式！
		对形式参数的操作，根本不是影响到实际参数(变量)的值，两者相当于没有联系!
	2.按引用传递参数
		按引用传递参数，相当于形式参数和实际参数指的是同一个人，只是名字不一样，对于形式参数的操作会直接影响到实际参数（变量）;
	3.函数的默认参数
		可以给形式参数设置默认值，设置方法很简单直接赋值即可！
		给形式参数加默认值的时候是重右往左加的，右边的必须有，才能够给左边的加！
	4.可变长度参数列表
		PHP提供给我们的，可以直接使用
		func_get_args();
		func_get_arg();
		func_num_args();
		这三个函数可以使用在我们的自定义函数内部，能够返回给我们一些关于参数的信息!
四、可变函数（变量函数）
		直接把函数赋值给变量
		可变函数不能用于例如 echo，print，unset()，isset()，empty()，include，require 以及类似的语言结构。需要使用自己的包装函数来将这些结构用作可变函数。 
		

//1.按值传递参数
function test($a){ //$a是形式参数，$i是实际参数，两者没有关系，互不影响
	echo ++$a;
}
$i=10;
test($i); //这里相当于把$i赋值给$a ----> $a=$i;
echo '<br />'.$i; //输出11和10，$i的值还是10
echo '<br />';

//2.按引用传递参数
function test00(&$b){
	echo ++$b.'<br />';    //相当于echo $b=$b+1; $b的初始值是10，自增后是11；那$j就是11；
}
$j=10;
test00($j); //$j=&$b;加&符号是相当于给变量起另外一个名，这里对$b的操作就是对$j的操作；就是说对形式参数的操作会直接影响到实际参数；
echo $j; //这里输出11，11,

$e=100;
$f=&$e; // &$e=$f这种写法不合法
echo ++$f.'<br />';
echo $e; //这里就是引用，两个变量的值都是101



//3.函数的默认参数
function test($a=100){ //参数有默认值
	echo ++$a;
}
// test();//输出101，这里不再给值的话就输出默认值
test(10);//给值了之后输出11；

function test($a=100,$b){ 
	echo $a+$b;
}
// test();//输出101，这里不再给值的话就输出默认值
// test(,11); //这样写是不合法的，默认值要从又往左给
test(11);//这样写合法，但是会把11传给$a,相当于给$a=100的默认值是无用功


// 所以可以这样写：
function test($a,$b=10){
	echo $a+$b;
}
test(21);//这里第一个值默认给了$a;


4.可变长度参数列表
PHP提供的，可以直接使用
func_get_args();  //以数组的形式获取所有实际参数，然后做其他操作；
func_get_arg();  //例如获取第二个实际参数:func_get_arg(1);
func_num_args(); //获取有几个实际参数；
这三个函数可以使用在我们的自定义函数内部，能够返回给我们一些关于参数的信息，例如可以直接用var_dump(func_get_args())输出来；

function test(){
	var_dump(func_get_args());
}
test('asdasd',3343434,'附近的发卡计分卡合法');

输出：E:\wamp64\www\php_test\Part3_hanshu\index.php:204:
array (size=3)
  0 => string 'asdasd' (length=6)
  1 => int 3343434
  2 => string '附近的发卡计分卡合法' (length=30)


function test(){
	var_dump(func_get_args());//以数组形式输出所有参数值
	var_dump(func_get_arg(3)); //调用这个函数的时候，这里的值填几，就取出第几个参数。从0开始
	var_dump(func_num_args());//返回传入所在自定义函数的参数的个数
}
test('asdasd',3343434,'附近的发卡计分卡合法','\'2131dsfs得到放松放松');



四、可变函数（变量函数） 把一个函数加上单/双引号后，赋给一个变量,这个功能是PHP提供的功能；
function test(){
	echo '我是可变函数<br />';
}
$a='test';//函数名加上单/双引号，赋值给变量就可以;
$a();//这里有括号，相当于test(),执行函数;
echo('sddfsdfsdfsd'); //其实echo输出可以以函数的形式这么写，但是echo不是函数，它只是php给的一个语言结构（功能），详情看php手册，可变函数单元
可变函数不能用于例如 echo，print，unset()，isset()，empty()，include，require 以及类似的语言结构。需要使用自己的包装函数来将这些结构用作可变函数。

五、递归函数
	递归函数即在函数内部自己调用自己的函数。
	递归函数：
		1)函数在被调用的执行过程中会在内存里面分配空间用于存储临时数据，那么函数在执行过程中默认之间是没有联系的（除了
		静态变量，按引用传，全局变量）。里面的变量默认都是局部变量，相互之间没有影响！
		2)递归函数，在函数的内部需要有适时结束函数运行的条件！

function test($n){
	echo $n.'&nbsp';
	if ($n>0){
		test($n-1);
	}else{
		echo '~~';
	}
	echo 2;//也可以在这里输出echo n;
}
test(3);  //输出3 2 1 0 ~~2222

六、内部（内置）函数
PHP提供给我我们许多现成的函数或者结构，我们可以在实际的开发中直接使用！
    比如：
    echo()
    include()
    include_once()
    require()
    require_once()
    上面这些它们可以省略括号使用，严格意义上讲不是函数，所以这些不可以赋值给另外的变量，即不能作为可变函数；
还有一些函数需要开启特定地 PHP 扩展模块，否则在使用它们的时候就会得到一个致命的“未定义函数”错误。

一些常用的内置函数或者扩展的函数，我们在后面会陆陆续续的学习到，一些不太常用的可能我们没有办法全部讲到，但是
你使用函数是用来完成功能的，说白了，你有这样的需求，才会去找对应的函数！
 */



?>

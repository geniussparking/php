有以下元字符
\d	匹配任意一个十进制数字，等价于[0-9]
\D	匹配任意一个除十进制数字以外字符,等价于[^0-9]
\s	匹配任意一个空白字符,比如换页符、换行符、回车符、制表符、垂直制表符
\S	匹配除空白字符以外的任何一个字符
\w	匹配任意一个数字或字母或下划线
\W	匹配除数字、字母、下划线以外的任意一个字符
.	匹配除换行符以外的任意一个字符，如果真要匹配 . ，需要在正则表达式内在.前面加上\转义

*	匹配0次、或1次、或多次其前面的字符 // .*可以配合使用 ，比较厉害，表示匹配任意多个字符，比如$pattern='/te.*t/'可以匹配'teeeesdsdfgd2232t'
+	匹配1次或多次其前面的字符,比如：$pattern='/tes+t/',可以匹配'tessst'，s至少出现一次，多至无数次
?	匹配0次或1次其前面的字符，注意：0或1次
{n}	表示其前面字符恰好出现n次
{n,}	表示其前面字符出现不少于n次
{n,m}	表示其前面的字符至少出现n次，最多出现m次

^或\A	匹配字符串开始位置 例如：$pattern='/^test/'，会去字符串开始的地方先去找t。 str='test00test';这样只能找到一个test
$或者\Z	匹配字符串的结束位置  $pattern='/test01$/'，会去字符串结束的地方先去找1。 str='test00test01';这样只能找到一个test01

|	匹配两个或多个模式

[]	匹配方括号中的任意一个字符  $pattern='/te[123456789]st01/' 将会匹配'te1st01','te2st01','te3st01'....
[^]	匹配除方括号中字符以外的任意一个字符  $pattern='/te[^s]t01/'; 所有中间带s的将会被排除
()	将括号中作为一个整体以便将其中的内容获取到
	在我们的正则表达式中 可以使用圆括号来将某一段括起来，在圆括号的后面部分，我们可以使用\\数字 来代表圆括号部分所匹配到的内容！

<?php
//正则表达式 manual--函数参考--文本处理--PCRE--PCRE函数
$str='test123testgggtest88998hhhtest';
$pattern='/test/';//正则表达式 一般用“定界符”双 /包含起来, 除了字母、数字、和反斜线以外的字符都可以作为定界符，比如#!{}|
var_dump(preg_match_all($pattern,$str,$arr));//$arr用来存放查找到的数据，是数组形式，下面可以输出或者利用
var_dump($arr);
//正则表达式由普通字符和元字符组合起来,例如：'/abc\d/'， \d相当于任意一个十进制的数字，0-9

$str='abct6st1234testddd';
//$pattern='/t\dst/'; //  \d匹配任意一个十进制数字
//var_dump(preg_match_all($pattern,$str,$arr));
//var_dump($arr);

$pattern='/t\Dst/'; //  \D匹配任意一个除十进制以外的字符
var_dump(preg_match_all($pattern,$str,$arr));
var_dump($arr);

//$str='abct6st1234t stddd';
//$pattern='/t\sst/'; //  \s匹配任意一个空白字符,比如换页符、换行符、回车符、制表符、垂直制表符
$str="abct\nst"; //如果变量里面有\ 则要用双引号 因为单引号里面的内容不会被转义。\n表示换行符，\r表示回车符，\t表示制表符
echo $str;
$pattern='/t\sst/';
var_dump(preg_match_all($pattern,$str,$arr));
var_dump($arr);


[]	匹配方括号中的任意一个字符
[^]	匹配除方括号中字符以外的任意一个字符  $pattern='/te[^s]t01/'; 所有中间带s的将会被排除

<?php
$pattern='/a[^123]{2}c/';     //可以搭配使用
$str='aaa多个a1223232cbbb匹aaaccc模aaa式';
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
echo @$arr[0][0];
?>

输出：
int 1
array (size=1)
  0 => 
    array (size=1)
      0 => string 'aaac' (length=4)
aaac

*	匹配0次、或1次、或多次其前面的字符 
+	匹配1次或多次其前面的字符,比如：$pattern='/tes+t/',可以匹配'tessst'，s至少出现一次，多至无数次
?	匹配0次或1次其前面的字符，注意：0或1次
{n}	表示其前面字符恰好出现n次
{n,}	表示其前面字符出现不少于n次
{n,m}	表示其前面的字符至少出现n次，最多出现m次

注意*和+的区别，*是指它前面的字符出现任意次数，+表示至少有1次;
$pattern='/te?st/';    ?前面的e出现0或1次;
$pattern='/te{n}st/';    {n}前面的e要精确出现n次;
$pattern='/te{n,}st/';   {n,}前面的e要至少出现n次;
$pattern='/te{n,m}st/';   {n,m}前面的e要至少出现n次到m次;

* + ? {}这些可以和 . \d \D \s \s \w \W 配合使用
如何记忆？d表示digital，数字的意思; s表示space，空格的意思；w表示word，字的意思；

.*配合使用，默认是贪婪匹配；如果在.*后面加上?就会变成懒惰匹配，因为?是表示其前面的字符出现0次或1次的意思,可以这么去理解记忆，实际上不是；

加?懒惰匹配：
<?php
$pattern='/t.*?st/';
$str='    abc  test t3st t sst';
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
?>
这里输出：
int 3
array (size=1)
  0 => 
    array (size=3)
      0 => string 'test' (length=4)
      1 => string 't3st' (length=4)
      2 => string 't sst' (length=5)    懒惰匹配  注意这里输出的是二维数组，可以用echo $arr[0][0];输出test

不加?贪婪匹配
<?php
$pattern='/t.*st/';
$str='    abc  test t3st t sst';
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
?>
输出：
int 1
array (size=1)
  0 => 
    array (size=1)
      0 => string 'test t3st t sst' (length=15)   贪婪匹配  输出的是二维数组


^或\A	匹配字符串开始位置 ^托字符，$pattern='/^test/'; 要查找的字符必须是以t打头；
$或者\Z	匹配字符串的结束位置  $pattern='/tes$/'; 要查找的字符必须是以s结尾；

<?php
$pattern='/^t.*?s$/';    //以t开头，以s结尾
$str='t    abc  test t3st t s';
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
echo @$arr[0][0];
?>

输出：
int 1
array (size=1)
  0 => 
    array (size=1)
      0 => string 't    abc  test t3st t s' (length=23)
t abc test t3st t s

|	匹配两个或多个模式

<?php
$pattern='/aaa|bbb|ccc/';
$str='aaa多个bbb匹aaa配ccc模aaa式';
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
echo @$arr[0][3];
?>

输出：
int 5
array (size=1)
  0 => 
    array (size=5)
      0 => string 'aaa' (length=3)
      1 => string 'bbb' (length=3)
      2 => string 'aaa' (length=3)
      3 => string 'ccc' (length=3)
      4 => string 'aaa' (length=3)
ccc


()的用法：将括号中作为一个整体以便将其中的内容获取到，在我们的正则表达式中 可以使用圆括号来将某一段括起来，在圆括号的后面部分，我们可以使用\\数字 来代表圆括号部分所匹配到的内容！
$pattern='/te(s)t01/';
$str='test01teet01';
var_dump(preg_match_all($pattern, $str,$arr));
var_dump($arr);

返回：
array (size=2)
0 =>
	array (size=1)
	0 => string 'test01' (length=6)
1 =>
	array (size=1)
	0 => string 's' (length=1)


$pattern='/te(s)t01\\1/'; //其实这里相当于是$pattern='/test01s/';
$str='test01steet01';
var_dump(preg_match_all($pattern, $str,$arr));
var_dump($arr);

返回：
array (size=2)
0 =>
	array (size=1)
	0 => string 'test01s' (length=7)
1 =>
	array (size=1)
	0 => string 's' (length=1)


$pattern='/te(s)t(0)1\\2/'; //其实这里相当于是$pattern='/test010/';
$str='test010steet01';
var_dump(preg_match_all($pattern, $str,$arr));
var_dump($arr);

返回：
array (size=3)
0 =>
	array (size=1)
	0 => string 'test010' (length=7)
1 =>
	array (size=1)
	0 => string 's' (length=1)
2 =>
	array (size=1)
	0 => string '0' (length=1)

$pattern='/t(.)(.)t\\1\\2/'; //这里的两个点分别匹配到的是es，所以后面12一定要是es才能匹配准确
$str='testes010st1et01';
var_dump(preg_match_all($pattern, $str,$arr));
var_dump($arr);
返回：
array (size=3)
0 =>
	array (size=1)
	0 => string 'testes' (length=6)
1 =>
	array (size=1)
	0 => string 'e' (length=1)
2 =>
	array (size=1)
	0 => string 's' (length=1)




模式修饰符: 手册：函数参考--文本处理--PCRE--PCRE模式--正则表达式模式中可用的模式修饰符
 * 模式修正符是在正则表达式的定界符之后使用的，可以调整正则表达式的
	 解释，扩展正则表达式在匹配、替换等操作时的某些功能，增强正则表达
	 式的处理能力。
常见模式修正符
i	在和模式进行匹配时不区分大小写
m	多行匹配，如果目标字符串中没有"\n"字符, 或者模式中没有出现^或$, 设置这个修饰符不产生任何影响
s	如果设定了此修正符，那么.将匹配所有的字符包括换行符
U	禁止贪婪匹配


//模式修正符i

/*
$pattern='/test/';
$str='test Test TEst teSt tesT';
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
//这种情况只有一个符合的
array (size=1)
0 =>
array (size=1)
0 => string 'test' (length=4)


$pattern='/test/i'; //使用模式修正符后
$str='test Test TEst teSt tesT';
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);

array (size=1)
	0 =>
array (size=5)
	0 => string 'test' (length=4)
	1 => string 'Test' (length=4)
	2 => string 'TEst' (length=4)
	3 => string 'teSt' (length=4)
	4 => string 'tesT' (length=4)
*/

/*模式修正符m-->多行匹配 
使用条件：
1)目标字符串中必须包含"\n"
在字符串中出现"\n"就表示新的一行开始
2)正则表达式中必须要出现^或者$,表示从首字符/末字符开始查找
学前须知：
\r:回车符
\n:换行符
在windows系统每一行字符的开头都隐含一个\n，结尾隐含一个\r； n--New，r--Return回车
Linux系统每一行字符只有在开头有一个\n;


$pattern='/^test/'; // 有托字符^
$str="test\ntest\ntest\ntest"; // \n相当于换行
/* "等价于”  ----后面有区别
 $str='test
 test
 test
 test';
 */
/*var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
//这时候只能匹配到一个test

$pattern='/^test/m'; //使用m多行匹配模式修正符后，能找到四个test
$str="test\ntest\ntest\ntest"; 
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);

$pattern='/^test/m'; //这种情况能找到4个，虽然每一行字符前面隐含一个\n，但是这里相当于是查找以t开头的字符；
$str="test
test
test
test";
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
*/


/*$pattern='/test$/m'; 
这种情况只能找到1个
$str="test
test
test
test";
这里相当于$str="test/r/ntest/r/ntest/r/ntest/"; 从末尾匹配的话，从第二个test开始，开始字符是/r，所以无法匹配4个，只能匹配最后一个test
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);

这样子改写就能匹配3个：
$pattern='/test\r$/m';
$str="test //因为实际上，在windows系统里面，这里test结尾处有\r，所以$前面找\r就好了；
test
test
test";     //这里test后面其实没有\r，所以只能匹配3个
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);

$pattern='/test\r*$/m'; //加上*，表示*前面的一个字符可有可无-->兼容模式,windows和linux都能匹配四个
$str="test
test
test
test";
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
*/

//模式修正符 s,如果设定了此修正符，那么.将匹配所有的字符包括换行符\n
/*
$pattern='/t.st/s'; 
$str="t\nst"; //.本来不能匹配换行符，但是加了s模式修正符后，可以了
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);

$pattern='/t.est/'; 
$str="t
est";
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);

//这种情况其实还是不行，因为这里的字符串实际上是str="t\r\nest"; 我们看到的换行现象实际上是\r\n组成的

//改写后是这样：
$pattern='/t.*?est/s'; //?前面的字符出现0次或1次，那就是说不管linux还是windows，有没有\r都可以了。
$str="t
est";
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
*/


//模式修正符U	禁止贪婪匹配
/*$pattern='/t.*f/'; // 这种情况下，贪婪匹配，返回整个字符串
$str="tfdgdfgdf   ffrghgergef   dsfsdferkjlkjf";
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);

$pattern='/t.*f/U'; // 只匹配最近的一个f，不会找后面的f，注意，U大写！！
$str="tfdgdfgdf   ffrghgergef   dsfsdferkjlkjf";
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);

$pattern='/t.*?f/'; // .*?  是配合使用的  这样的效果相当于加了禁止贪婪匹配
$str="tfdgdfgdf   ffrghgergef   dsfsdferkjlkjf";
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);


$pattern='/t.*f/iU'; // 模式修正符可以配合使用，顺序无所谓，i表示忽略大小写，U禁止贪婪匹配
$str="Tfdgdfgdf   ffrghgergef   dsfsdferkjlkjf";
var_dump(preg_match_all($pattern, $str, $arr));
var_dump($arr);
*/


六、与正则表达式配合的函数。参考手册： http://php.net/manual/zh/ref.pcre.php
	 1.preg_match()
	 2.preg_match_all()
	 3.preg_replace()

//preg_match()执行一个正则表达式匹配，（返回值是0或1）,注意：不能匹配数组。
参数说明：
	第一个参数:正则表达式
	第二个参数：目标字符串
	第三个参数（可选）：放一个变量，执行完成之后，里面会有匹配到的部分！
	第四个参数（可选）：可以传PREG_OFFSET_CAPTURE进入(那么第三个参数那个变量里面的数据就会有匹配到的部分的偏移值（从0开始往右数）)，默认第四个参数传的是0
	第五个参数（可选）：可以传一个值,来表示从目标字符串的哪个位置开始搜索（单位是字节）。
$pattern='/t.*?t/';
$str='0123test   teest  tteeesst';
var_dump(preg_match($pattern, $str , $arr , PREG_OFFSET_CAPTURE));
var_dump($arr);
返回：
array (size=1)
	0 =>
	array (size=2)
		0 => string 'test' (length=4)
		1 => int 4    //PREG_OFFSET_CAPTURE的作用就是这里输出偏移值，PREG_OFFSET_CAPTURE是PHP自定义常量，值是256；

$pattern='/t.*?t/';
$str='0123test000teest  tteeesst';
var_dump(preg_match($pattern, $str , $arr , PREG_OFFSET_CAPTURE , 8)); //这里的8就是第五个参数，表示从第9位开始匹配
var_dump($arr);
输出：
array (size=1)
  0 => 
    array (size=2)
      0 => string 'teest' (length=5)
      1 => int 11

//还可以这么用
<?php
$pattern='/t(.*?)st/';
$str='012345678testtvrgrgrst';
if(preg_match($pattern, $str,$arr,PREG_OFFSET_CAPTURE)){
	echo '找到啦！<br />';
	var_dump($arr);
}else{
	echo '没找到！';
	var_dump($arr);
}
?> 

输出：
找到啦！
array (size=2)
  0 => 
    array (size=2)
      0 => string 'test' (length=4)
      1 => int 9        //offset 偏移量
  1 => 
    array (size=2)
      0 => string 'e' (length=1)
      1 => int 10      //offset 偏移量


$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, substr($subject,3), $matches, PREG_OFFSET_CAPTURE);   //注意这里的substr()这个函数，是字符串截取函数；
print_r($matches);
var_dump($matches);
*/

/*
 preg_match_all()
第四个参数（可选）：
PREG_PATTERN_ORDER   默认值，不传就是这个
PREG_SET_ORDER       按组排序
PREG_OFFSET_CAPTURE   偏移值
第五个参数（可选）：可以传一个值,来表示从目标字符串的哪个位置开始搜索（单位是字节）。
按照需求来写
$pattern='/t(.*?)(s)t/';
$str='adwdwqdqwdqwtest      tdqwst     test  tvrgrgrst';
var_dump(preg_match_all($pattern, $str,$arr,PREG_OFFSET_CAPTURE));
var_dump($arr);
*/


/*
 preg_replace()
参数说明：
第一个参数：正则表达式
第二个参数：要替换成的字符串
第三个参数：目标字符串
第四个参数(可选)：默认是-1，指定替换次数；
第五个参数(可选): 放一个变量，存放被替换的次数

<?php
$pattern='/<div>(.*?)<\/div>/';
$str='<div>这里是div里面的内容</div>';
$replacement='<a>\\1</a>';    //这里可以直接使用上面括号里面的内容
$replace=preg_replace($pattern, $replacement, $str);
var_dump($replace);
?> 
输出：string '<a>这里是div里面的内容</a>' (length=34)

<?php
$pattern='/<div>(.*?)<\/div>/';
$str='<div>这里是div里面的内容</div><div>这里是div1里面的内容</div><div>这里是div2里面的内容</div>'; // 深刻理解禁止贪婪匹配的含义，所有div的内容被替换
$replacement='<a>\\1</a>';    //这里可以直接使用上面括号里面的内容，还可以使用$1来反向引用；
$replace=preg_replace($pattern, $replacement, $str);
var_dump($replace);
?> 
输出：
string '<a>这里是div里面的内容</a><a>这里是div1里面的内容</a><a>这里是div2里面的内容</a>' (length=104)    //这里只要是div的内容都会被替换掉


$pattern='/<div(.*?)>(.*?)<\/div>/';
$str1='<a$1 href="http://sifangku.com">$2</a>'; //$1 $2代表上一行括号里面的内容，也可以使用\\1 \\2
$str='dwqdwq<div style="color:red;font-size:25px;">测试成为绯闻绯闻绯闻绯dwqdwqdwq闻cqdwqdqw</div>dqwwdqdwq<div>我是后面那个div</div>';
if(preg_match($pattern, $str,$arr)){
	echo '替换后的：'.preg_replace($pattern, $str1, $str,-1,$count);
	var_dump($count);
}else{
	echo '对不起，没有找到！';
}
echo '<br /><br /><br /><br />';
echo '原来的字符串：'.$str;
*/

/*
preg_replace第一个参数与第二个参数传数组，一一对应的去替换！ 替换数组！
*/
$pattern=array(
		'/<div(.*?)>(.*?)<\/div>/',
		'/<p(.*?)>(.*?)<\/p>/'
);
$str1=array(
		'<a$1 href="http://sifangku.com">$2</a>',
		'<span$1>我是span标签啦！$2</span>'
);
$str='dwqdwq<div style="color:red;font-size:25px;">测试成为绯闻绯闻绯闻绯dwqdwqdwq闻cqdwqdqw</div>dqwwdqdwq<p>我是后面那个div</p>';

echo '替换后的：'.preg_replace($pattern, $str1, $str,-1,$count);
var_dump($count);
echo '<br /><br /><br /><br />';
echo '原来的字符串：'.$str;
?>
 */
 
 
 自己写的例子：
 <?php 
$pattern=array(
	'/<div(.*?)>(.*?)<\/div>/',
	'/<p(.*?)>(.*?)<\/p>/'      //相当于是多个pattern写在一个数组里面，被替换成的数组也写成数组，一一对应；
);
$str1=array(
	'<a$1 href="http://www.baidu.com">这里是a标签了：$2</a>',    
	'<span$1>这里是span标签了：$2</span>'    //注意每一个pattern里面反向引用的数字，都是$1和$2;
);
$str='<div style="font-size:24px; color:red;">这里是div1标签</div><div style="font-size:10px;color:green;">这里是div2标签</div><p style="font-size:30px; color:green;">这里是p标签</p>';
$replace=preg_replace($pattern, $str1, $str, -1, $count);   //注意这里的参数，第四个默认是-1,表示替换所有符合条件的；第五个参数是替换的次数，存到一个变量里面；
echo '没有替换前：'.$str;
echo '<br /><br /><br /><br />';
echo '替换之后：'.$replace;
echo '<br /><br /><br /><br />';
echo '替换次数:'.$count;
var_dump($str);
var_dump($replace);
?>

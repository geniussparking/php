<?php
header('Content-Type:text/html;charset=utf-8');
/*
位运算，注意与逻辑运算不是一种 
简单记忆方法：1111  如何算
	     8421  -> 8+4+2+1=15
1、理论上的进制转换
	十进制转二进制：
		12->1100
	二进制转十进制
		1100
		----
		3210
		拿二进制数本位的值乘以2第多少位次方，把这些值加起来就好了!（注：这边的^表示数学符号多少次方）
		1*2^3+1*2^2+0*2^1+0*2^0=1*8+1*4=12
2、原码(数值的原码)
	原码是数值的真值的绝对值的最高位表示符号位
		正数用0
		负数用1
	数值的最高位到底是哪一位？	
		最高位和具体环境有关，首先你要知道一个数总共占多少位？
		当前我们的PHP运行环境里面一个整数占多少位？
		PHP_INT_SIZE字节	var_dump(PHP_INT_SIZE);
		我们当前这边是4字节
		4*8=32位
		--------------------------------
		00000000000000000000000000001100[12原码]
		10000000000000000000000000001100[-12的原码]
3、反码
	正数的反码就是其值本身和其原码相同
	负数的反码
		符号位不变，其他位取反
		--------------------------------
		00000000000000000000000000001100[12反码]
		10000000000000000000000000001100[-12的原码]
		11111111111111111111111111110011[-12的反码]
4、补码
	正数的补码就是其本身和其原码相同
	负数的补码其值的反码加1
		--------------------------------
		00000000000000000000000000001100[12补码]
		11111111111111111111111111110011[-12的反码]
		11111111111111111111111111110100[-12的补码]
5、为什么要讲这么一大堆？
	用的是哪一种形式？
	计算机中数值一律采用“补码” 的形式来表示、处理、存储、运算!减少计算机硬件电路的复杂性！
	var_dump(decbin(-12));  //以补码形式输出二进制，计算机的二进制数都是以补码表示的
*/


<?php
header('Content-Type:text/html;charset=utf-8');
/*
&按位与，与运算，一个0结果就是0
00000000000000000000000000001100[补码]12
11111111111111111111111111110100[补码]-12
================================&按位与运算
00000000000000000000000000000100[补码]结果也是补码
这很显然是一个正数
00000000000000000000000000000100[原码]
	1*2^2=4
	注意：这边的^代表数学符号多少次方！
*/
var_dump(12&-12);
/*
|按位或
00000000000000000000000000001100[补码]12
11111111111111111111111111110100[补码]-12
================================|按位或运算
11111111111111111111111111111100[补码]
得到的补码以1开头，说明这是一个负数
减去1后得到反码
11111111111111111111111111111011[反码]
10000000000000000000000000000100[原码]
-(1*2^2)=-4
*/
var_dump(12|-12);
/*
^按位异或
00000000000000000000000000001100[补码]12
11111111111111111111111111110100[补码]-12
================================^按位异或运算
11111111111111111111111111111000[补码 ]
这是一个负数
减去1得到反码
11111111111111111111111111111000[补码 ]
00000000000000000000000000000001
11111111111111111111111111110111[反码]
反码取反得到原码，符号位（第一位）不变
10000000000000000000000000001000[原码]
-(1*2^3)=-8
*/
var_dump(12^-12);
/*
00000000000000000000000000001100[补码]12
================================~按位取反运算
11111111111111111111111111110011[补码]
这是一个负数
减去1
11111111111111111111111111110011[补码]
00000000000000000000000000000001
11111111111111111111111111110010[反码]
10000000000000000000000000001101[原码]
-(1*2^3+1*2^2+1*2^0)=-(8+4+1)=-13
*/
var_dump(~12);
/*
<<左移
00000000000000000000000000000001[补码]
00000000000000000000000000000010[补码]
*/
var_dump(1<<1);
/*
>>右移
00000000000000000000000000000010[补码]
00000000000000000000000000000001[补码]
*/
var_dump(2>>1);
